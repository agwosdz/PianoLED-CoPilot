#!/usr/bin/env bash
# Manual testing guide for Piano LED selection interaction

echo "=========================================="
echo "Piano LED Selection Interaction Test"
echo "=========================================="
echo ""
echo "This feature allows users to:"
echo "1. Click a piano key in the visualization"
echo "2. See the corresponding LEDs light up (white)"
echo "3. Click another key to turn off previous LEDs and light new ones"
echo "4. Click the same key again to deselect and turn off LEDs"
echo ""
echo "=========================================="
echo "API Endpoints Used:"
echo "=========================================="
echo ""
echo "1. GET /api/calibration/key-led-mapping"
echo "   - Fetches piano keys with their mapped LED indices"
echo "   - Returns: { mapping: { midi_note: [led_indices...] }, ... }"
echo ""
echo "2. POST /api/calibration/led-on/{led_index}"
echo "   - Lights up a specific LED persistently (white color)"
echo "   - Stays on until turned off"
echo "   - Returns: { message: 'LED X turned on (persistent)', ... }"
echo ""
echo "3. POST /api/led/off"
echo "   - Turns off all LEDs"
echo "   - No parameters needed"
echo "   - Returns: { message: 'All LEDs turned off', ... }"
echo ""
echo "=========================================="
echo "Frontend Interaction Flow:"
echo "=========================================="
echo ""
echo "User clicks key → handleKeyClick(midiNote)"
echo "   ↓"
echo "Same key selected? → Deselect & turnOffAllLeds()"
echo "   ↓"
echo "Different key selected? → turnOffAllLeds() then lightUpLedRange(ledIndices)"
echo "   ↓"
echo "First key selection? → lightUpLedRange(ledIndices)"
echo ""
echo "=========================================="
echo "Code Components:"
echo "=========================================="
echo ""
echo "Frontend: CalibrationSection3.svelte"
echo "  - lightUpLedRange(): Calls /api/calibration/led-on for each LED in range"
echo "  - turnOffAllLeds(): Calls /api/led/off to clear all LEDs"
echo "  - handleKeyClick(): Orchestrates selection/deselection logic"
echo ""
echo "Backend: calibration.py"
echo "  - POST /api/calibration/led-on/{led_index}: New persistent LED endpoint"
echo "  - Returns white (255, 255, 255) instead of cyan"
echo "  - No auto-off timer (stays lit until turnoff)"
echo ""
echo "Backend: hardware_test.py"
echo "  - POST /api/led/off: Turn off all LEDs"
echo "  - Turns off LED strip completely"
echo ""
echo "=========================================="
echo "Testing Instructions:"
echo "=========================================="
echo ""
echo "1. Start backend: python -m backend.app"
echo "2. Start frontend: npm run dev"
echo "3. Navigate to Settings → Calibration"
echo "4. In 'Piano LED Mapping' section:"
echo "   - Click a piano key"
echo "   - Watch corresponding LEDs light up (white)"
echo "   - Click another key"
echo "   - Previous LEDs turn off, new LEDs light up"
echo "   - Click the same key again"
echo "   - All LEDs turn off"
echo ""
echo "=========================================="
echo "✅ Implementation Complete!"
echo "=========================================="
